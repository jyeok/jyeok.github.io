{"componentChunkName":"component---src-templates-blog-post-js","path":"/hello-world/","result":{"data":{"site":{"siteMetadata":{"title":"JyeokLog"}},"markdownRemark":{"id":"51ab2a2c-6aa7-5976-8423-d42115f394ae","excerpt":"기존의 blog starter로부터 에서 오피셜하게 지원하는 로 이주하게 되면서 기존의 스켈레톤 코드를 살펴보았다. directory root  와 은 `prettier’의 설정과 관련된 파일들이 들어 있다. 린터로 를 사용하므로 를 추가적으로 설치해 주었다.  Gatsby…","html":"<p>기존의 blog starter로부터 <code class=\"language-text\">gatsby</code>에서 오피셜하게 지원하는 <a href=\"https://github.com/gatsbyjs/gatsby-starter-blog\"><code class=\"language-text\">gatsby-starter-blog</code></a>로 이주하게 되면서 기존의 스켈레톤 코드를 살펴보았다.</p>\n<h1>directory root</h1>\n<h2><code class=\"language-text\">Prettier</code></h2>\n<p><code class=\"language-text\">.prettierrc</code>와 <code class=\"language-text\">prettierignore</code>은 <a href=\"https://prettier.io\">`prettier’</a>의 설정과 관련된 파일들이 들어 있다.</p>\n<p>린터로 <code class=\"language-text\">eslint</code>를 사용하므로 <a href=\"https://github.com/prettier/eslint-config-prettier#installation\"><code class=\"language-text\">eslint-config-prettier</code></a>를 추가적으로 설치해 주었다.</p>\n<h2><code class=\"language-text\">gatsby-browser</code></h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// custom typefaces</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"typeface-montserrat\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"typeface-merriweather\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// normalize CSS across browsers</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./src/normalize.css\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// custom CSS styles</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./src/style.css\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Highlighting for code blocks</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"prismjs/themes/prism.css\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser/\">Gatsby Browser API</a>를 통해 client side와 interact한다.</p>\n<h2><code class=\"language-text\">gatsby-config</code></h2>\n<p>site metadata와 gatsby plugin을 설정하는 파일이다.</p>\n<h3><code class=\"language-text\">siteMetadata</code></h3>\n<p>사이트의 메타데이터.</p>\n<h3><a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-config/\">plugin</a></h3>\n<h4><a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-image/\"><code class=\"language-text\">gatsby-plugin-image</code></a></h4>\n<p>정적 이미지의 경우 <code class=\"language-text\">StaticImage</code> 컴포넌트를 사용한다. 파일 경로 혹은 리모트 url을 모두 넘겨줄 수 있는데, 이 파일들은 <strong>build time</strong>에 다운로드되고 로드되므로 파일 이름을 prop처럼 넘겨줄 수 없다. 즉 filename은 local variable 혹은 static string이어야 한다. 기술적인 이유로 parent component의 prop을 <code class=\"language-text\">StaticImage</code>의 <code class=\"language-text\">prop</code>으로 넘겨줄 수 없다. 이를 원한다면 Static이 아니라 Dynamic Image을 만들어야 한다.</p>\n<h4><a href=\"https://www.gatsbyjs.com/plugins/gatsby-source-filesystem/\"><code class=\"language-text\">gatsby-source-filesystem</code></a></h4>\n<p>파일로부터 <code class=\"language-text\">File</code> node를 만들어낸다.</p>\n<h4><a href=\"https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/\"><code class=\"language-text\">gatsby-transformer-remark</code></a></h4>\n<p>Markdown 파일들을 parse하여 node로 변환한다. <a href=\"https://using-remark.gatsbyjs.org/?__hstc=247646936.e39ee17690d9bb2b23fabf7f247f1f89.1614924405128.1615025114172.1615045675644.7&#x26;__hssc=247646936.1.1615045675644&#x26;__hsfp=2710090937\">이 링크</a>에서 다양한 플러그인과 예시를 확인할 수 있다.</p>\n<h4><a href=\"https://github.com/lovell/sharp\"><code class=\"language-text\">gatsby-transformer-sharp</code></a></h4>\n<p><a href=\"https://github.com/libvips/libvips\"><code class=\"language-text\">libvips</code></a> 라이브러리를 사용하여 빠른 이미지 프로세싱을 지원하는 플러그인이다. <a href=\"https://en.wikipedia.org/wiki/Lanczos_resampling\">Lanczos Resampling</a> 기법 사용. <code class=\"language-text\">gatsby-transformer-sharp</code>에서는 이미지를 <code class=\"language-text\">ImageSharp</code> node로 변환한다. 사용을 위해서는 <code class=\"language-text\">gatsby-source-filesystem</code> 등의 source plugin이 필요하다.</p>\n<h4><a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-feed/\"><code class=\"language-text\">gatsby-plugin-feed</code></a></h4>\n<p>RSS feed를 만들어 주는 플러그인으로 내부에서 <a href=\"https://www.npmjs.com/package/rss#itemoptions\"><code class=\"language-text\">rss</code></a> 패키지를 사용한다.</p>\n<p><code class=\"language-text\">output</code>, <code class=\"language-text\">query</code>, <code class=\"language-text\">title</code>을 각각 반드시 포함해야 하며 사용할 때 용도에 맞게 <code class=\"language-text\">serialize</code> 함수를 구현해 주어야 한다. <code class=\"language-text\">match</code>는 optional configuration으로 <code class=\"language-text\">pathname</code>이 RegExp를 만족하는지의 여부를 테스트하여 피드를 필터링할 때 사용된다.</p>\n<h4><a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-manifest/\"><code class=\"language-text\">gatsby-plugin-manifest</code></a></h4>\n<p>모바일 브라우저에서 ‘add to home screen` 기능을 사용할 때 app manifest를 제공한다.</p>\n<h4><a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-react-helmet/\"><code class=\"language-text\">gatsby-plugin-react-helmet</code></a></h4>\n<p>React Helmet은 document head를 컨트롤하기 위해 사용된다. 이는 웹 브라우저들에서도 사용되지만 SEO (Search Engine Optimization)에서도 중요한데, 검색 엔진들은 search result를 정렬할 때 document head 안에 있는 site metadata들을 적극적으로 이용하기 때문이다.</p>\n<p>SPA에서는 화면을 이동할 때 마다 서버로부터 전체 페이지 데이터를 받아오는 것이 아니라 필요한 데이터만을 요청한다. 즉 브라우저 단에서 라우팅이 바뀌어도 문서의 title은 처음에 받은 값이 유지된다. 즉 화면이 이동될 때 동적으로 타이틀을 바꾸기 위해서는 <code class=\"language-text\">document.title</code>의 값을 변경해 주어야 한다.</p>\n<p>자세한 정보는 <a href=\"https://jeonghwan-kim.github.io/dev/2020/08/15/react-helmet.html#%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84-%EC%B5%9C%EC%A0%81%ED%99%94%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%A0-%EB%95%8C\">링크</a>에서..</p>\n<h4><a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-gatsby-cloud/\"><code class=\"language-text\">gatsby-plugin-gatsby-cloud</code></a></h4>\n<p><code class=\"language-text\">public</code> folder에 Header과 Redirection을 정의하는 <code class=\"language-text\">_headers.json</code>, <code class=\"language-text\">_redirects.json</code> 파일을 생성한다. 기본값으로는 보안을 위한 헤더만을 정의한다.</p>\n<h2><code class=\"language-text\">gatsby-node.js</code></h2>\n<p>Gatsby Node API는 브라우저에 영향을 미치는 Gatsby의 setting이고 이를 customization하거나 extend하기 위해서는 이 파일을 수정한다. 이 파일에 담긴 코드는 build time에 한 번 실행된다. 여기서 페이지들을 동적으로 생성하거나 GraphQL에 노드를 추가하거나 build lifecycle에서 일어나는 이벤트들에 접근할 수 있다. 수정 할 수 있는 API의 리스트들은 <a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/\">이 링크</a>에서 확인할 수 있다.</p>\n<p>Gatsby Node API에서는 첫 파라미터로 <a href=\"https://www.gatsbyjs.com/docs/reference/config-files/node-api-helpers\">Node API Helper</a>를 담고 있는 객체를 받는다. 어떤 헬퍼들을 사용할 수 있는지는 위 링크에서 확인할 수 있다.</p>\n<p>어떤 plugin들은 <strong>async operation</strong>을 수행하는데 이 때 반드시</p>\n<ul>\n<li><code class=\"language-text\">Promise</code> API를 사용하거나</li>\n<li><code class=\"language-text\">async</code>/<code class=\"language-text\">await</code> 문법을 사용하거나</li>\n<li>callback을 세 번째 argument로 넘겨야 한다.</li>\n</ul>\n<p>이를 통해 Gatsby가 다른 API와의 순서를 고려하여 처리되어야 하는 특정 플러그인들을 제대로 처리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Async/await</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do async work</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchExternalData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Promise API</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do async work</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Callback API</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> pluginOptions<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do async work</span>\n  <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2><a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr/\"><code class=\"language-text\">gatsby-ssr.js</code></a></h2>\n<p>기본 starter에는 정의되어있지 않지만 이 파일은 gatsby가 <a href=\"https://velopert.com/3425\">서버 사이드 렌더링</a>시 사용할 API들을 정의한다.</p>","frontmatter":{"title":"gatsby-starter-blog 분석","date":"March 06, 2021","description":"Hello World"}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"51ab2a2c-6aa7-5976-8423-d42115f394ae","previousPostId":"34c0ac24-dfe5-5377-8e6e-ecc824a537fb","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}